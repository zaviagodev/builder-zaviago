name: Build & Publish

on:
  push:
    branches:
      - "**"             # all branches
      - "!dependabot/**"      # exclude dependbot branches
  
  workflow_dispatch:      # Manually run the workflow
env:
  IMAGE_NAME: mywebassets_2
  MAIN_HOST: ${{secrets.MAIN_HOST}}
  NEXTAUTH_URL: ${{secrets.NEXTAUTH_URL}}
  NEXTAUTH_SECRET: ${{secrets.NEXTAUTH_SECRET}}
jobs:
  next-build:
    if: ${{ github.event_name == 'workflow_dispatch' }}       # Run only if triggered manually
    runs-on: ubuntu-latest
    container: node:lts          # Use node LTS container version, same as Dockerfile base image
    steps:
      - name: Checkout
        uses: actions/checkout@v2       # Checkout the code
      - run: npm ci            #install dependencies
      # - run: npm run build
      # - name: Upload Next build          # Upload the artifact
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: build
      #     path: |
      #       .next
      #       public
      #     retention-days: 7         # artifact retention duration, can be upto 30 days
  docker-push:
    needs: next-build        # Job depends on next-build(above) job
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build . --file Dockerfile --tag $IMAGE_NAME --label "runnumber=${GITHUB_RUN_ID}"
      - name: Log in to registry
        # This is where you will update the PAT to GITHUB_TOKEN
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
          
      - name: Deploy package to digitalocean
        uses: appleboy/ssh-action@v0.1.4
        env:
          GITHUB_USERNAME: ${{secrets.USERNAME}}
          GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          port: ${{ secrets.DEPLOY_PORT }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_KEY }}
          envs: GITHUB_USERNAME, GITHUB_TOKEN, IMAGE_NAME, MAIN_HOST
          script: |
            docker login ghcr.io -u $GITHUB_USERNAME -p $GITHUB_TOKEN

            IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

            # Change all uppercase to lowercase
            IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
            # Strip git ref prefix from version
            VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
            # Strip "v" prefix from tag name
            [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
            # Use Docker `latest` tag convention
            [ "$VERSION" == "master" ] && VERSION=latest
            echo IMAGE_ID=$IMAGE_ID
            echo VERSION=$VERSION

            docker pull $IMAGE_ID:$VERSION
            docker stop $IMAGE_NAME
            docker system prune -f
            docker run -v ~/uploads:/app/uploads/ --restart unless-stopped --name $IMAGE_NAME -dit -p 8081:8081 $IMAGE_ID:$VERSION
  